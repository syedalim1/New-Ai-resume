// This file is generated by Firebase Studio.
"use server";
/**
 * @fileOverview An AI agent that extracts skills, experience, qualifications, and full text from resumes.
 *
 * - extractSkillsExperience - A function that handles the extraction process.
 * - ExtractSkillsExperienceInput - The input type for the extractSkillsExperience function.
 * - ExtractSkillsExperienceOutput - The return type for the extractSkillsExperience function.
 */

import { ai } from "@/ai/genkit";
import { z } from "genkit";
import { GoogleGenerativeAI } from "@google/generative-ai";

// Default Gemini API key - hardcoded to ensure it's available in server components
const API_KEY = "AIzaSyAXP4kBBXRl6vgqsVYGXm9XNzAozjZnnt8";

// Initialize the Google Generative AI model directly
const genAI = new GoogleGenerativeAI(API_KEY);
const model = genAI.getGenerativeModel({
  model: "gemini-2.5-flash-preview-04-17",
});

const ExtractSkillsExperienceInputSchema = z.object({
  resumeDataUri: z
    .string()
    .describe(
      "A resume document, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});
export type ExtractSkillsExperienceInput = z.infer<
  typeof ExtractSkillsExperienceInputSchema
>;

const ExtractSkillsExperienceOutputSchema = z.object({
  fullText: z
    .string()
    .describe("The full text content extracted from the resume document."),
  skills: z
    .array(z.string())
    .describe("A list of skills extracted from the resume."),
  experience: z
    .string()
    .describe(
      "A summary of the candidate's experience based on the full text."
    ),
  qualifications: z
    .string()
    .describe(
      "A summary of the candidate's qualifications based on the full text."
    ),
});
export type ExtractSkillsExperienceOutput = z.infer<
  typeof ExtractSkillsExperienceOutputSchema
>;

export async function extractSkillsExperience(
  input: ExtractSkillsExperienceInput
): Promise<ExtractSkillsExperienceOutput> {
  return extractSkillsExperienceFlow(input);
}

const extractSkillsExperiencePrompt = ai.definePrompt({
  name: "extractSkillsExperiencePrompt",
  input: { schema: ExtractSkillsExperienceInputSchema },
  output: { schema: ExtractSkillsExperienceOutputSchema },
  prompt: `You are an AI expert in resume analysis. Your task is to extract the full text content, skills, experience, and qualifications from the provided resume data.

  Analyze the following resume:
  {{media url=resumeDataUri}}

  Provide the following:
  1.  **Full Text:** The complete text content extracted verbatim from the resume.
  2.  **Skills:** A list of skills identified from the resume's full text.
  3.  **Experience:** A concise summary of the candidate's professional experience based on the full text.
  4.  **Qualifications:** A brief summary of the candidate's educational and other qualifications based on the full text.

  Ensure the output is well-structured. The "Full Text" field must contain all readable text from the document.
  `,
});

const extractSkillsExperienceFlow = ai.defineFlow(
  {
    name: "extractSkillsExperienceFlow",
    inputSchema: ExtractSkillsExperienceInputSchema,
    outputSchema: ExtractSkillsExperienceOutputSchema,
  },
  async (input) => {
    const { output } = await extractSkillsExperiencePrompt(input);
    if (!output) {
      throw new Error("Failed to extract skills and experience from resume.");
    }
    if (!output.fullText || output.fullText.trim().length < 50) {
      // Basic check for meaningful text extraction
      console.warn("Potentially poor text extraction from resume", output);
      // Depending on strictness, you might throw an error or allow continuation
      // For now, we'll proceed but this indicates a potential issue with the model's extraction or the document itself.
    }
    return output;
  }
);
